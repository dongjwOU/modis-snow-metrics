;this subroutine calculates the snow metrics
;snow metrics ae defined as: fss_f,fss_l,fss_range, css_f,css_l,css_range,days_snowon,flg_metrics
;flg_metrics=-1, no data, flg_metrics=0, not valid data, flg_metrics=1, valid metrics data
   
pro snow_metrics_calcu, cover, newcv, fract, albed, quali, bname, newfract, metrics

snow=200
night=11
no_snow=25
cloud=50
fill=255
saturated=254

;---0. get the resonable range for first_idx: current 8/1 to next 1/31, last_idx:next 2/1- next 7/31
yyyy=strmid(bname(0),0,4) ;
yyyyn= string(fix(yyyy)+1, format='(I4)')

;---first_idx range
ddd='214'  ; current 8/1
date=yyyy+'-'+ddd
idx=where(bname GE date,cnt )
if cnt GT 0 then begin
first_idx_st = idx(0) ;
endif else begin
first_idx_st= 0
endelse

ddd='031'  ; next 1/31
date=yyyyn+'-'+ddd
idx=where(bname GE date )
first_idx_ed = idx(0) ;

;---the last_idx range
ddd='032'  ; next 2/1
date=yyyyn+'-'+ddd
idx=where(bname GE date)
last_idx_st = idx(0) ; index of the number of consequtive snow points

ddd='213'  ; next 7/31
date=yyyyn+'-'+ddd
idx=where(bname GE date, cnt)
if cnt GT 0 then begin
last_idx_ed = idx(0) ; index of the number of consequtive snow points
endif else begin
last_idx_ed = n_elements(bname)-1
endelse

;---- reasonable css range

;---the last_idx range
ddd='031'  ; next 1/31
date=yyyyn+'-'+ddd
idx=where(bname GE date)
css_st = idx(0) ; index of the number of consequtive snow points

ddd='045'  ; next 2/15
date=yyyyn+'-'+ddd
idx=where(bname GE date)
css_ed = idx(0) ; index of the number of consequtive snow points

unbroken_days=css_ed-css_st + 1

;----1. use newcv to determine the index of first and last snow days 

;bnames_metrics = ['first_day','last_day','fss_range','css_first_day','css_last_day','css_day_range','snow_days','no_snow_days','reserved','mflag']

num=n_elements(newcv)

first_idx = -1
last_idx  = -1  ; initial values 

idx = where(newcv EQ snow and fract GT 0 and fract LE 100, cnt)

if cnt LT 0 then begin ; <1> no valid snow data, mflg=-1

newfract=fract

metrics(9)=-1 ;snow free land or lake

return

endif else begin; <1> have snow data

;-- have snow day, get the first_day, last_day, and fss_days
first_idx=idx(0) ;
last_idx = idx(n_elements(idx)-1 ) 
;---calculate first_day, last_day, and fss_days
fss=dayrange(bname,first_idx,last_idx)
first_day=fss.on_day
last_day =fss.end_day
fss_days =fss.day_range

;--- calculate css first and last day
;method 1
;get_css_indics, newcv, first_idx,last_idx,stidx, edidx
;if stidx LT css_st or stidx GT css_ed or edidx LT css_st or edidx GT css_ed then begin
;newfract=fract
;metrics=0
;return
;endif

;method 2
get_css_indics_v2, newcv, fract, albed, quali, bname, first_idx, last_idx, css_st, css_ed, stidx, edidx

if stidx LT first_idx or $
   edidx GT last_idx  or $
   stidx EQ -1        or $
   edidx EQ -1 then begin ; <2> only have snow days, but not have css, mflg=0

metrics[0]=first_day
metrics[1]=last_day
metrics[2]=fss_days

newfract=fract
;---calcualte snow days and no-snow days
snowidx= where(newfract GT 0 and newfract LE 100, snowcnt)

if snowcnt GT 0 then begin ; <3>
metrics(6)=snowcnt  ;  snow days
;-----calcualte no-snow days
netrics(7)=n_elements(newdfrac)-sncnt

endif ;<3>

metrics(9)=0 ;have snow days, but no css 

return

endif else begin ;<2> have snow days and css, mflg=1 

;---have both snow days and css

;--- calcualte newfract---------
newfract =fract
;------ 0 to stidx-1
if stidx GT 0 then begin
wrk1=newfract(0:stidx-1)
num1=stidx
idx100 = where(wrk1 GT 100,cnt100)
if cnt100 GT 0 then begin
wrk1(idx100) = 0
newfract(0:stidx-1)=wrk1
endif

endif

;-----edidx+1 to n_elements(newfract)-1 

num=n_elements(newfract)
if edidx LT num-1 then begin
wrk3= newfract(edidx+1:num-1)
idx100=where(wrk3 GT 100, cnt100)
if cnt100 GT 0 then begin
wrk3(idx100)= 0
newfract(edidx+1:num-1)=wrk3
endif

endif

;--- stidx to edidx
wrk2 = newfract(stidx:edidx)
num2=n_elements(wrk2)
xin=where(wrk2 LE 100 and wrk2 GT 0, xincnt )  ; valid fract

if xincnt GT 0 then begin
v=wrk2(xin)
xout=indgen(num2)
wrk2=byte( interpol_line_fill(v,xin,xout)  )
newfract(stidx:edidx)=wrk2
endif

;---------- 

;;bnames_metrics = ['first_day','last_day','day_range','css_first_day','css_last_day','css_day_range','snow_days','no_snow_days','mflag']

css = dayrange(bname,stidx,edidx )   
css_first=css.on_day
css_last =css.end_day
css_days=css.day_range

metrics[0]=first_day
metrics[1]=last_day
metrics[2]=fss_days

metrics[3]=css_first
metrics[4]=css_last
metrics[5]=css_days

;-----calcualte snow days
snowidx= where(newfract GT 0 and newfract LE 100, snowcnt)
if snowcnt GT 0 then begin
metrics(6)=snowcnt  ;  snow days
;-----calcualte no-snow days
metrics(7)=n_elements(newfract)-snowcnt

endif

;----set mflag as valid
metrics[9]=1  ; have css

return

endelse ;<2>

endelse ;<1>


end