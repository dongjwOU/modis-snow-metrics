;this subroutine calculates the snow metrics
;snow metrics ae defined as: fss_f,fss_l,fss_range, css_f,css_l,css_range,days_snowon,flg_metrics
;flg_metrics=-1, no data, flg_metrics=0, not valid data, flg_metrics=1, valid metrics data
   
pro snow_metrics_calcu, cover, newcv, fract, albed, quali, bname, newfract, metrics

snow=200
night=11
no_snow=25
cloud=50
fill=255
saturated=254

;---0. get the resonable range for first_idx: current 8/1 to next 1/31, last_idx:next 2/1- next 7/31
yyyy=strmid(bname(0),0,4) ;
yyyyn= string(fix(yyyy)+1, format='(I4)')

;---first_idx range
ddd='214'  ; current 8/1
date=yyyy+'-'+ddd
idx=where(bname GE date,cnt )
if cnt GT 0 then begin
first_idx_st = idx(0) ;
endif else begin
first_idx_st= 0
endelse

ddd='031'  ; next 1/31
date=yyyyn+'-'+ddd
idx=where(bname GE date )
first_idx_ed = idx(0) ;

;---the last_idx range
ddd='032'  ; next 2/1
date=yyyyn+'-'+ddd
idx=where(bname GE date)
last_idx_st = idx(0) ; index of the number of consequtive snow points

ddd='213'  ; next 7/31
date=yyyyn+'-'+ddd
idx=where(bname GE date, cnt)
if cnt GT 0 then begin
last_idx_ed = idx(0) ; index of the number of consequtive snow points
endif else begin
last_idx_ed = n_elements(bname)-1
endelse

;---- reasonable css range

;---the last_idx range
ddd='031'  ; next 1/31
date=yyyyn+'-'+ddd
idx=where(bname GE date)
css_st = idx(0) ; index of the number of consequtive snow points

ddd='045'  ; next 2/15
date=yyyyn+'-'+ddd
idx=where(bname GE date)
css_ed = idx(0) ; index of the number of consequtive snow points



;----1. use newcv to determine the index of first and last snow days 

;metrics=[first_snow, last_snow, fss_range, css_first, css_last,css_range, days_of_snow]  

num=n_elements(newcv)

idx = where(newcv EQ snow and fract GT 0 and fract LE 100, cnt)

if cnt LT 14 then begin ; first and last snow, more tahn 14 days
newfract=fract
metrics(9)=0
return

endif

;-----find the index of the first new snow day 
first_idx = -1
last_idx  = -1  ; initial values 

first_idx=idx(0) ;

;--- check if cover=200, 0<fract<=100, is it a new snow (>=30)
;
;for k=0, cnt-1 do begin
;if albed( idx(k) ) GE 30 and albed( idx(k)) LE 100 then begin  ; check if it is new snow (albedo >=30,Marshall, Susan Elaine, Thesis,PhD)
;first_idx=idx(k)
;break
;endif
;endfor



;---find the index of the last snow day, do not check if the last snow is the new snow
last_idx = idx(n_elements(idx)-1 ) 

;--- do not calculate the metrics if the first_idx and/or last_idx are not reasonable
if (first_idx LT first_idx_st ) or (first_idx GT first_idx_ed ) or $ 
   (last_idx  LT last_idx_st )  or (last_idx  GT last_idx_ed  ) then begin ;snow period is less than 30 days 
newfract=fract
metrics(9)=0
return
endif

;---
fss=dayrange(bname,first_idx,last_idx)
first_day=fss.on_day
last_day =fss.end_day
fss_days =fss.day_range

;--- calculate css first and last day
;method 1
;get_css_indics, newcv, first_idx,last_idx,stidx, edidx
;if stidx LT css_st or stidx GT css_ed or edidx LT css_st or edidx GT css_ed then begin
;newfract=fract
;metrics=0
;return
;endif

;method 2
get_css_indics_v2, newcv, fract, albed, quali, bname, first_idx, last_idx, css_st, css_ed, stidx, edidx
if stidx LT first_idx or edidx GT last_idx or stidx EQ -1 or edidx EQ -1 then begin
newfract=fract
metrics(9)=0 ; no css, so set the mflg=0, not valid data
return
endif


;---3. produce newfract---------

newfract =fract

;------ 0 to stidx-1
if stidx GT 0 then begin
wrk1=newfract(0:stidx-1)
num1=stidx
idx100 = where(wrk1 GT 100,cnt100)
if cnt100 GT 0 then begin
wrk1(idx100) = 0
newfract(0:stidx-1)=wrk1
endif

endif

;-----edidx+1 to n_elements(newfract)-1 

num=n_elements(newfract)
if edidx LT num-1 then begin
wrk3= newfract(edidx+1:num-1)
idx100=where(wrk3 GT 100, cnt100)
if cnt100 GT 0 then begin
wrk3(idx100)= 0
newfract(edidx+1:num-1)=wrk3
endif

endif

;--- stidx to edidx
wrk2 = newfract(stidx:edidx)
num2=n_elements(wrk2)
xin=where(wrk2 LE 100 and wrk2 GT 0, xincnt )  ; valid fract

if xincnt GT 0 then begin
v=wrk2(xin)
xout=indgen(num2)
wrk2=byte( interpol_line_fill(v,xin,xout)  )
newfract(stidx:edidx)=wrk2
endif

;-----snow days, nop-snow days
snowidx= where(newfract GT 0 and newfract LE 100, snowcnt)
if snowcnt GT 0 then begin
metrics(6)=snowcnt  ;  snow days
endif

;---------- 
;css_first=strmid(bnames(stidx),5,3)
;css_last =strmid(bnames(edidx),5,3)
;;; bnames_metrics = ['first_day','last_day','day_range','css_first_day','css_last_day','css_day_range','snow_days','no_snow_days','mflag']

css = dayrange(bname,stidx,edidx )   
css_first=css.on_day
css_last =css.end_day
css_days=css.day_range

metrics[0]=first_day
metrics[1]=last_day
metrics[2]=fss_days

metrics[3]=css_first
metrics[4]=css_last
metrics[5]=css_days



metrics[9]=1  ; mflag

return

end